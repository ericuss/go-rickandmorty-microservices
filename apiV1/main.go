package main

import (
	"fmt"
	"log"
	"net/http"
	repositories "rickAndMortyApi/internal/repositories"
	server "rickAndMortyApi/internal/server"

	_ "rickAndMortyApi/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
)

func init() {
	log.Println("init")
}

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2

func main() {
	log.Println("Starting app...")

	router := mux.NewRouter()

	characterRepository := repositories.NewCharacterRepository()
	locationRepository := repositories.NewLocationRepository()

	server.NewCharactersController(characterRepository, router)
	server.NewLocationsController(locationRepository, router)
	router.HandleFunc("/health", healthHandler)

	router.PathPrefix("/swagger/").Handler(httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
		httpSwagger.DeepLinking(true),
		httpSwagger.DocExpansion("none"),
		httpSwagger.DomID("#swagger-ui"),
	))

	fmt.Println("The beers server is on tap now: http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", router))

	log.Println("Finished")
}

func healthHandler(w http.ResponseWriter, _ *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("everything is ok!"))
}